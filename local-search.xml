<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>前端国际化你还在一个个翻译?复制粘贴,让你坐着喝茶</title>
    <link href="/2022/12/30/%E5%89%8D%E7%AB%AF%E5%9B%BD%E9%99%85%E5%8C%96%E4%BD%A0%E8%BF%98%E5%9C%A8%E4%B8%80%E4%B8%AA%E4%B8%AA%E7%BF%BB%E8%AF%91-%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4-%E8%AE%A9%E4%BD%A0%E5%9D%90%E7%9D%80%E5%96%9D%E8%8C%B6/"/>
    <url>/2022/12/30/%E5%89%8D%E7%AB%AF%E5%9B%BD%E9%99%85%E5%8C%96%E4%BD%A0%E8%BF%98%E5%9C%A8%E4%B8%80%E4%B8%AA%E4%B8%AA%E7%BF%BB%E8%AF%91-%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4-%E8%AE%A9%E4%BD%A0%E5%9D%90%E7%9D%80%E5%96%9D%E8%8C%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="前端国际化你还在一个个翻译-复制粘贴-让你坐着喝茶"><a href="#前端国际化你还在一个个翻译-复制粘贴-让你坐着喝茶" class="headerlink" title="前端国际化你还在一个个翻译?复制粘贴,让你坐着喝茶"></a>前端国际化你还在一个个翻译?复制粘贴,让你坐着喝茶</h1><h2 id="先上体验地址"><a href="#先上体验地址" class="headerlink" title="先上体验地址"></a>先上体验地址</h2><p><a href="https://david-xia001.github.io/Json-Internation/">JSON国际化小工具</a></p><hr><p>不能翻译的情况可能是免费翻译字符数用完了,可以自己注册之后换上自己的 appid 和 key 就行了</p><p><a href="https://github.com/David-XIa001/Json-Internation">源码地址</a></p><h2 id="需求及背景"><a href="#需求及背景" class="headerlink" title="需求及背景"></a>需求及背景</h2><blockquote><p>项目迭代了好几年,之前一直没有做国际化,今天产品突然告诉我项目要做国际化,而且时间很紧,我一口老血喷出来了<br>这么多业务文件,得一个个去做 i18n 映射,还得自己翻译字段,还得支持好几种语言<br>真要这样干下去,我真的人没了<br>为此我做了个国际化翻译的小工具,让我在翻译阶段节约了 99% 的时间</p></blockquote><h2 id="痛苦"><a href="#痛苦" class="headerlink" title="痛苦"></a>痛苦</h2><ul><li>页面已经做了 i18n 映射,但是只有中文词条</li><li>英文和其他语言词条需要我<strong>一条一条</strong>用百度翻译去翻译,还得选择不同语言</li><li>然后拿到结果去英文,日文,法文等文件中粘贴</li><li>一条两条还好,几百上千条,怕是我<strong>cv</strong>键都得按报废</li></ul><h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><blockquote><p>经过几十次的手动 cv 后,我发现这个步骤都是固定,我做的就是重复劳动<br>既然是重复劳动,那能不能做批处理,使用程序去处理这件枯燥无味的事情呢?<br>那就行动吧!</p></blockquote><h3 id="程序思维"><a href="#程序思维" class="headerlink" title="程序思维"></a>程序思维</h3><h4 id="把大象装进冰箱里需要几个步骤"><a href="#把大象装进冰箱里需要几个步骤" class="headerlink" title="把大象装进冰箱里需要几个步骤"></a>把大象装进冰箱里需要几个步骤</h4><ul><li>打开冰箱</li><li>把大象放进冰箱里</li><li>关上冰箱门</li><li>完事,至于其中的细节,只需要分而治之就行</li></ul><h4 id="同理-把词条翻译成对应语言也只需要几个步骤"><a href="#同理-把词条翻译成对应语言也只需要几个步骤" class="headerlink" title="同理,把词条翻译成对应语言也只需要几个步骤"></a>同理,把词条翻译成对应语言也只需要几个步骤</h4><ul><li>拿到词条</li><li>选择要翻译的语言</li><li>进行翻译</li><li>拿到结果,完事</li></ul><p>知道思路我们就开始行动吧!</p><h3 id="拿到词条"><a href="#拿到词条" class="headerlink" title="拿到词条"></a>拿到词条</h3><h4 id="先看词条长啥样子"><a href="#先看词条长啥样子" class="headerlink" title="先看词条长啥样子"></a>先看词条长啥样子</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br><br>     <span class="hljs-string">&quot;device&quot;</span>: &#123;<br><br>     <span class="hljs-string">&quot;device&quot;</span>: <span class="hljs-string">&quot;激活设备&quot;</span>,<br><br>     <span class="hljs-string">&quot;confirm&quot;</span>: <span class="hljs-string">&quot;密码确认&quot;</span>,<br><br>     <span class="hljs-string">&quot;active&quot;</span>:<span class="hljs-string">&quot;激活&quot;</span> &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>词条是一个 JSON 格式的对象,但是我们并不能直接处理它</li><li>需要一条一条的取出来,但是它又有层级嵌套</li><li>所以第一步得先拍平</li><li>然后就可以遍历拍平后的对象,拿到每一条词条</li></ul><h3 id="选择要翻译的语言"><a href="#选择要翻译的语言" class="headerlink" title="选择要翻译的语言"></a>选择要翻译的语言</h3><h4 id="使用百度翻译工具"><a href="#使用百度翻译工具" class="headerlink" title="使用百度翻译工具"></a>使用百度翻译工具</h4><ul><li>百度翻译开发者平台,注册之后可以使用百度翻译的api</li><li><a href="https://api.fanyi.baidu.com/product/11">注册地址</a></li><li>百度翻译基本支持全球主要国家语言</li><li>调 api 的时候提供对应参数即可</li><li>翻译的事情交给百度翻译</li></ul><h3 id="结果处理"><a href="#结果处理" class="headerlink" title="结果处理"></a>结果处理</h3><ul><li>拿到了翻译结果,但是数据格式并不是我们期望的</li><li>进行格式转换</li><li>还原拍平前的数据格式,只改变值,不改变 key</li><li>就拿到我们想要的结果啦</li><li>当然还是需要检查一下结果的,百度翻译其实只是一个粗翻</li></ul><h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><ul><li>数据格式的支持与校验<ul><li>我们把本地对象放到页面上的组件时,其实格式发生了变化</li><li>从一个 json 对象变成了 string</li><li>但是我们最终需要的还是一个 json 所以需要使用 JSON 来进行转化</li><li>对于 obj 对象,可以使用 eval 执行后获取</li></ul></li><li>分片与合并<ul><li>受限于百度翻译平台单次只能翻译 2000 以内字符</li><li>所以在超出后需要进行分片</li><li>得到结果后再进行合并</li></ul></li></ul><h3 id="成果"><a href="#成果" class="headerlink" title="成果"></a>成果</h3><ul><li>支持json类型 [√]</li><li>支持对象类型 [√]</li><li>支持分片处理(不受限于2000字以内的翻译,目前分片是1000字符分割一次) [√]</li><li>文件上传及下载 [×]</li><li>多语言选择 [√]</li></ul><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><ul><li>其实真正耗时的地方在于 i18n 的映射</li><li>这一块我个人是手动处理的,需要耗费大量的时间和精力</li><li>这一块其实也能做很多事情</li><li>类似于 babel 得到 AST 之后,将所有符合规则的 value 拿出来进行映射</li><li>key就直接取首字母,重复的后面就加数字</li><li>然后再直接调用api,真的解放这种国际化方案的生产力</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>前端使用OAuth2.0的实现refreshToken无痛刷新</title>
    <link href="/2022/12/29/%E5%89%8D%E7%AB%AF%E4%BD%BF%E7%94%A8OAuth2-0%E7%9A%84%E5%AE%9E%E7%8E%B0refreshToken%E6%97%A0%E7%97%9B%E5%88%B7%E6%96%B0/"/>
    <url>/2022/12/29/%E5%89%8D%E7%AB%AF%E4%BD%BF%E7%94%A8OAuth2-0%E7%9A%84%E5%AE%9E%E7%8E%B0refreshToken%E6%97%A0%E7%97%9B%E5%88%B7%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="前端使用OAuth2-0的实现refreshToken无痛刷新"><a href="#前端使用OAuth2-0的实现refreshToken无痛刷新" class="headerlink" title="前端使用OAuth2.0的实现refreshToken无痛刷新"></a>前端使用OAuth2.0的实现refreshToken无痛刷新</h1><h2 id="业务背景"><a href="#业务背景" class="headerlink" title="业务背景"></a>业务背景</h2><blockquote><p>现在项目中登录鉴权一般使用的是 OAuth 2.0, 登录完成后会返回两个token,分别是 <strong>accessToken</strong> 和 <strong>refreshToken</strong><br><strong>accessToken</strong> 我们在调接口的时候会带给服务端,作为用户凭证在, <strong>refreshToken</strong> 是用来刷新用户凭证的一个参数<br>目的是避免用户经常因为还在操作页面的时候 <strong>accessToken</strong> 过期,需要重新登录的较差体验</p></blockquote><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>登录完成后会返回两个token,分别是 <strong>accessToken</strong> 和 <strong>refreshToken</strong> 以及一个 <strong>expiresTime</strong> 过期时间</li><li><strong>accessToken</strong> 作为用户凭,证调接口的时候会带给服务端</li><li>前端会在拦截器中判断 当前时间是否超过了 <strong>expiresTime</strong> 过期时间<ul><li>超过了,就会调用刷新 <strong>token</strong> 的接口, <strong>refreshToken</strong> 将作为请求参数带到服务端,接口会返回新的 <strong>accessToken</strong> 和 <strong>refreshToken</strong> 和 <strong>expiresTime</strong>,后面的请求将使用新的 <strong>accessToken</strong> 作为用户凭证带给服务端</li><li>未超过,直接使用 <strong>accessToken</strong> 作为用户凭证</li></ul></li><li>只要用户在一直操作,那么就算他的 <strong>accessToken</strong> 过期也不需要重新登录</li><li>直到超过了 <strong>refreshToken</strong> 的过期时间(一般这个时间会比 <strong>accessToken</strong> 过期时间长很多,说明用户在这段时间内都没有进行操作),才会真正的过期</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><blockquote><p>项目将使用axios的库进行请求的发送和拦截</p></blockquote><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><code>src └─libs ├─axios │ ├─config.js │ ├─index.js │ ├─instance.js</code></p><h3 id="config-js"><a href="#config-js" class="headerlink" title="config.js"></a>config.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * axios的公共配置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> config = &#123;<br>  <span class="hljs-attr">baseURL</span>: process.<span class="hljs-property">env</span>.<span class="hljs-property">VUE_APP_BASE_API</span>, <span class="hljs-comment">// base_api</span><br>  <span class="hljs-comment">// 公共请求头</span><br>  <span class="hljs-attr">headers</span>: &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json; charset=UTF-8&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span>, <span class="hljs-comment">// 超时时间</span><br>  <span class="hljs-comment">// 默认的响应方式</span><br>  <span class="hljs-attr">responseType</span>: <span class="hljs-string">&#x27;json&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> config<br><br></code></pre></td></tr></table></figure><h3 id="instance-js"><a href="#instance-js" class="headerlink" title="instance.js"></a>instance.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> config <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./config&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Message</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><span class="hljs-keyword">import</span> &#123;<br>  getAccessToken,<br>  removeAccessToken,<br>  removeRefreshToken,<br>  removeExpiresTime<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/auth&#x27;</span> <span class="hljs-comment">//这里的函数主要是使用 localStorage 进行数据持久化</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/router&#x27;</span><br><span class="hljs-keyword">import</span> i18n <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/lang&#x27;</span>  <span class="hljs-comment">// 国际化</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建一个独立的axios实例</span><br><span class="hljs-comment"> * 把常用的公共请求配置放这里添加</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>(config)<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 请求拦截</span><br><span class="hljs-comment"> * 添加一些全局要带上的东西</span><br><span class="hljs-comment"> */</span><br>instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-comment">// 正常拦截</span><br>  <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 添加token</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">LOCAL_TOKEN</span> = <span class="hljs-title function_">getAccessToken</span>()<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable constant_">LOCAL_TOKEN</span>) &#123;<br>      config.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;Authorization&#x27;</span>] = <span class="hljs-variable constant_">LOCAL_TOKEN</span><br>    &#125;<br>    <span class="hljs-comment">// 返回处理后的配置</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(config)<br>  &#125;,<br><br>  <span class="hljs-comment">// 拦截失败</span><br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(err)<br>)<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回拦截</span><br><span class="hljs-comment"> * 在这里解决数据返回的异常问题</span><br><span class="hljs-comment"> */</span><br>instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-comment">// 正常响应</span><br>  <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(res.<span class="hljs-property">data</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(res)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 异常响应（统一返回一个msg提示）</span><br>  <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err.<span class="hljs-property">response</span> &amp;&amp; err.<span class="hljs-property">response</span>.<span class="hljs-property">status</span>) &#123;<br>      <span class="hljs-keyword">switch</span> (err.<span class="hljs-property">response</span>.<span class="hljs-property">status</span>) &#123;<br>        <span class="hljs-comment">// ...</span><br>        <span class="hljs-keyword">case</span> <span class="hljs-number">500</span>:<br>          <span class="hljs-title class_">Message</span>(&#123;<br>            <span class="hljs-attr">message</span>: i18n.<span class="hljs-title function_">t</span>(<span class="hljs-string">`error.<span class="hljs-subst">$&#123;err.response.data.code&#125;</span>`</span>),<br>            <span class="hljs-attr">duration</span>: <span class="hljs-number">1500</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span><br>          &#125;)<br>          <span class="hljs-keyword">if</span> (err.<span class="hljs-property">response</span>.<span class="hljs-property">data</span>.<span class="hljs-property">code</span> === <span class="hljs-string">&#x27;TOKEN_INVALID&#x27;</span>) &#123; <span class="hljs-comment">//token 失效后的操作</span><br>            <span class="hljs-title function_">removeAccessToken</span>()<br>            <span class="hljs-title function_">removeExpiresTime</span>()<br>            <span class="hljs-title function_">removeRefreshToken</span>()<br>            router.<span class="hljs-title function_">replace</span>(&#123;<br>              <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/login&#x27;</span><br>            &#125;)<br>          &#125;<br>          <span class="hljs-keyword">break</span><br>        <span class="hljs-attr">default</span>:<br>          <span class="hljs-keyword">return</span><br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(err.<span class="hljs-property">response</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-title class_">Message</span>(&#123;<br>          <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;服务器异常&#x27;</span>,<br>          <span class="hljs-attr">duration</span>: <span class="hljs-number">1500</span>,<br>          <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span><br>        &#125;)<br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>      &#125;<br>    &#125;<br>  &#125;<br>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> instance<br><br></code></pre></td></tr></table></figure><h3 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./instance&#x27;</span><br><span class="hljs-keyword">import</span> &#123;<br>  getAccessToken,<br>  getExpiresTime,<br>  setAccessToken,<br>  getRefreshToken,<br>  setRefreshToken,<br>  setExpiresTime<br>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/auth&#x27;</span> <span class="hljs-comment">//这里的函数主要是使用 localStorage 进行数据持久化</span><br><span class="hljs-keyword">import</span> &#123; refresh &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/api/user&#x27;</span> <span class="hljs-comment">// refresh 的api</span><br><br><span class="hljs-comment">// 防止重复刷新的状态开关</span><br><span class="hljs-keyword">let</span> isRefreshing = <span class="hljs-literal">false</span><br><span class="hljs-comment">// 被拦截的请求列表</span><br><span class="hljs-keyword">let</span> requests = []<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 请求拦截</span><br><span class="hljs-comment"> * 在这里要判断是否需要刷新token</span><br><span class="hljs-comment"> * 帮助用户自动延长登录有效期</span><br><span class="hljs-comment"> */</span><br>axios.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 刷新token</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">// 计算token的剩余有效时间</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">OLD_TOKEN_EXP</span> = <span class="hljs-title function_">getExpiresTime</span>() || <span class="hljs-number">0</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">NOW_TIMESTAMP</span> = <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>()<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">TIME_DIFF</span> = <span class="hljs-variable constant_">OLD_TOKEN_EXP</span> - <span class="hljs-variable constant_">NOW_TIMESTAMP</span><br>  <span class="hljs-comment">// 判断本地是否有记录</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">HAS_LOCAL_TOKEN</span> = !!<span class="hljs-title function_">getAccessToken</span>()<br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">HAS_LOCAL_TOKEN_EXP</span> = !!<span class="hljs-variable constant_">OLD_TOKEN_EXP</span><br>  <span class="hljs-comment">// 获取接口url</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">API_URL</span> = config.<span class="hljs-property">url</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;?&#x27;</span>)[<span class="hljs-number">0</span>] || <span class="hljs-string">&#x27;&#x27;</span><br>  <span class="hljs-comment">// 非刷新请求、有本地记录、已过期，同时满足，才会进入刷新流程</span><br>  <span class="hljs-keyword">if</span> (<br>    <span class="hljs-variable constant_">API_URL</span> !== <span class="hljs-string">&#x27;/admin-users/refreshToken&#x27;</span> &amp;&amp; <span class="hljs-comment">// 这个地方判断接口是否是刷新接口, api 地址需要一致</span><br>    <span class="hljs-variable constant_">HAS_LOCAL_TOKEN</span> &amp;&amp;<br>    <span class="hljs-variable constant_">HAS_LOCAL_TOKEN_EXP</span> &amp;&amp;<br>    <span class="hljs-variable constant_">TIME_DIFF</span> &lt;= <span class="hljs-number">2000</span> <span class="hljs-comment">// 这里的 2000 ms 是防止发送请求的时候没过期,但是接口到达服务器的时候过期了,根据实际情况进行调整</span><br>  ) &#123;<br>    <span class="hljs-comment">// 如果没有在刷新，则执行刷新</span><br>    <span class="hljs-keyword">if</span> (!isRefreshing) &#123;<br>      <span class="hljs-comment">// 打开状态</span><br>      isRefreshing = <span class="hljs-literal">true</span><br>      <span class="hljs-comment">// 获取新的token</span><br>      <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">REFRESH_TOKEN</span> = <span class="hljs-title function_">getRefreshToken</span>() || <span class="hljs-string">&#x27;&#x27;</span><br>      <span class="hljs-comment">// 请求刷新</span><br>      <span class="hljs-title function_">refresh</span>(<span class="hljs-variable constant_">REFRESH_TOKEN</span>)<br>        .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;<br>          <span class="hljs-comment">// 存储token信息</span><br>          <span class="hljs-keyword">const</span> data = res.<span class="hljs-property">data</span><br>          <span class="hljs-title function_">setAccessToken</span>(data.<span class="hljs-property">accessToken</span>)<br>          <span class="hljs-title function_">setRefreshToken</span>(data.<span class="hljs-property">refreshToken</span>)<br>          <span class="hljs-title function_">setExpiresTime</span>(data.<span class="hljs-property">expiresTime</span>)<br>          <span class="hljs-comment">// 如果新的token存在，用新token继续之前的请求，然后重置队列</span><br>          <span class="hljs-keyword">if</span> (data.<span class="hljs-property">accessToken</span>) &#123;<br>            config.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;Authorization&#x27;</span>] = data.<span class="hljs-property">accessToken</span><br>            requests.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">cb</span>) =&gt;</span> <span class="hljs-title function_">cb</span>(config))<br>            requests = []<br>          &#125;<br>          <span class="hljs-comment">// 关闭状态，允许下次继续刷新</span><br>          isRefreshing = <span class="hljs-literal">false</span><br>        &#125;)<br>        .<span class="hljs-title function_">catch</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          isRefreshing = <span class="hljs-literal">false</span><br>          requests = []<br>        &#125;)<br>    &#125;<br>    <span class="hljs-comment">// 并把刷新完成之前的请求都存储为请求队列</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>      requests.<span class="hljs-title function_">push</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(config)<br>      &#125;)<br>    &#125;)<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(config)<br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> axios<br><br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://chengpeiquan.com/article/refresh-token.html">基于OAuth2.0的refreshToken前端刷新方案与演示demo</a></p>]]></content>
    
    
    <categories>
      
      <category>工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gitLab使用镜像同步,迁移远程仓库</title>
    <link href="/2022/12/12/gitLab%E8%BF%81%E7%A7%BB%E8%BF%9C%E7%A8%8B%E4%BB%93/"/>
    <url>/2022/12/12/gitLab%E8%BF%81%E7%A7%BB%E8%BF%9C%E7%A8%8B%E4%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="gitLab使用镜像同步-迁移远程仓库"><a href="#gitLab使用镜像同步-迁移远程仓库" class="headerlink" title="gitLab使用镜像同步,迁移远程仓库"></a>gitLab使用镜像同步,迁移远程仓库</h1><h3 id="需求"><a href="#需求" class="headerlink" title="需求:"></a>需求:</h3><p>旧的远程仓库不再使用了,需要把旧的远程仓库代码迁移到新的远程仓库上</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作:"></a>操作:</h3><ol><li>使用常规手段,用旧的本地仓库更换远程仓库地址,然后推送到新的远程仓库中</li><li>使用gitlab自带的Mirroring repositories镜像同步的方法去将旧的仓库同步到新的远程仓库上</li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h3><ol><li><p>打开新的远程仓库的gitlab页面,找到setting下的repository下的</p><img src="/2022/12/12/gitLab%E8%BF%81%E7%A7%BB%E8%BF%9C%E7%A8%8B%E4%BB%93/1.png" class=""></li><li><p>展开后的页面需要填写这两个表单</p><img src="/2022/12/12/gitLab%E8%BF%81%E7%A7%BB%E8%BF%9C%E7%A8%8B%E4%BB%93/2.png" class=""></li><li><p>需要注意的是,旧的远程仓库的地址需要加上你旧的远程仓库的用户名</p><ol><li>远程仓库地址<a href="http://xxx.git/">http://xxx.git</a> 用户名为:david</li><li>那么要填的URL为: <a href="http://david@xxx.git/">http://david@xxx.git</a></li></ol></li><li><p>输入完毕后,点击这个按钮进行同步</p><img src="/2022/12/12/gitLab%E8%BF%81%E7%A7%BB%E8%BF%9C%E7%A8%8B%E4%BB%93/3.png" class=""></li><li><p>会出现这两个提示,告诉你正在同步</p><img src="/2022/12/12/gitLab%E8%BF%81%E7%A7%BB%E8%BF%9C%E7%A8%8B%E4%BB%93/4.png" class=""></li><li><p>这个时候等待即可,或者点下面那个刷新按钮,,直到告诉你已经同步成功了!</p><img src="/2022/12/12/gitLab%E8%BF%81%E7%A7%BB%E8%BF%9C%E7%A8%8B%E4%BB%93/5.png" class=""></li><li><p>然后点击删除按钮,删除掉这个同步,不然会一直同步的,这个时候就ok啦</p></li><li><p>这样同步过来的可能会有一个问题,就是之前设置的保护分支或者默认分支就需要重新设置一下</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
